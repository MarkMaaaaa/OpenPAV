{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open-PAV Open-PAV (Open Product Automated Vehicle) is an open platform designed to facilitate data collection, model calibration, and simulation of producted automated vehicle behaviors. It integrates diverse datasets and calibrated vehicle models, making it an essential tool for researchers and developers aiming to study product automated vehicle (PAV) dynamics and their impacts. The project encourages contributions from the research community and provides ready-to-use model parameters for seamless integration with simulation tools. Key Features Comprehensive Data Repository Collects and organizes data from PAVs, including LiDAR, images, videos, and trajectory data (We have summarized 14 AV brands, 33 AV models in 13 Open-source AV Datasets from 6 AV Data Providers, Dataset Publication ). Provides datasets in a unified vectorized format for efficient access and analysis. AV Model Calibration Supports linear models, IDM models (for SUMO), Wiedemann-99 (for Vissim), and machine learning-based models. Includes pre-configured model parameters for direct use in traditional simulation software. Multiple Simulator Integrations Enables rapid and accurate simulation of automated vehicle behavior and analysis of their impacts. Community Collaboration Designed to foster contributions and collaboration among researchers globally. What's New March 2025 Model Enhancements: Improved calibration modeling methodology. Simulation Integration: Configured packages for SUMO, VISSIM, and basic parameters for models. December 2024 Dataset Expansion: Added new open-source trajectory datasets from ULTRA datasets. Model Enhancements: Improved basic logic for the project. November 2024 Project Startup: Comprehensive installation and user guides are now available. Major Components Data Repository : A unified storage of diverse datasets (LiDAR, images, videos, trajectories). Model Calibration Tools : Utilities to calibrate vehicle kinematic models and export them for simulation. Simulator Integration : Pre-configured packages for SUMO, VISSIM, and other platforms. For more details, refer to the Open-PAV Documentation .","title":"Overview"},{"location":"#open-pav","text":"Open-PAV (Open Product Automated Vehicle) is an open platform designed to facilitate data collection, model calibration, and simulation of producted automated vehicle behaviors. It integrates diverse datasets and calibrated vehicle models, making it an essential tool for researchers and developers aiming to study product automated vehicle (PAV) dynamics and their impacts. The project encourages contributions from the research community and provides ready-to-use model parameters for seamless integration with simulation tools.","title":"Open-PAV"},{"location":"#key-features","text":"Comprehensive Data Repository Collects and organizes data from PAVs, including LiDAR, images, videos, and trajectory data (We have summarized 14 AV brands, 33 AV models in 13 Open-source AV Datasets from 6 AV Data Providers, Dataset Publication ). Provides datasets in a unified vectorized format for efficient access and analysis. AV Model Calibration Supports linear models, IDM models (for SUMO), Wiedemann-99 (for Vissim), and machine learning-based models. Includes pre-configured model parameters for direct use in traditional simulation software. Multiple Simulator Integrations Enables rapid and accurate simulation of automated vehicle behavior and analysis of their impacts. Community Collaboration Designed to foster contributions and collaboration among researchers globally.","title":"Key Features"},{"location":"#whats-new","text":"March 2025 Model Enhancements: Improved calibration modeling methodology. Simulation Integration: Configured packages for SUMO, VISSIM, and basic parameters for models. December 2024 Dataset Expansion: Added new open-source trajectory datasets from ULTRA datasets. Model Enhancements: Improved basic logic for the project. November 2024 Project Startup: Comprehensive installation and user guides are now available.","title":"What's New"},{"location":"#major-components","text":"Data Repository : A unified storage of diverse datasets (LiDAR, images, videos, trajectories). Model Calibration Tools : Utilities to calibrate vehicle kinematic models and export them for simulation. Simulator Integration : Pre-configured packages for SUMO, VISSIM, and other platforms. For more details, refer to the Open-PAV Documentation .","title":"Major Components"},{"location":"installation/","text":"Installation Guide Requirements Hardware Requirements CPU : Minimum 4 cores (Intel i5 or higher recommended) RAM : At least 8GB (16GB recommended for simulations) Storage : Minimum 10GB free space GPU (Optional, for AI-based models): NVIDIA GPU with CUDA support (e.g., RTX 3060 or higher) Software Requirements Operating System : Ubuntu 20.04/22.04 or Windows 10/11 Python : Version 3.8 or later Git : Installed and configured SUMO (Optional): Required for traffic simulation VISSIM (Optional): Required for advanced microscopic simulation PyTorch (Optional): Required for AI-based model testing Local Installation Step 1: Clone the Open-PAV Repository Use Git to download the Open-PAV source code: git clone https://github.com/MarkMaaaaa/OpenPAV.git cd OpenPAV Step 2: Install Dependencies Ensure Python and necessary packages are installed: pip install -r requirements.txt Step 3: Basic Test Environment Run a simple Python simulation to verify the installation: Quick Start Quick Start Example If this scripts run successfully and the plot appears, your environment is ready. Optional Components Option 1: Install SUMO For SUMO users, install it as follows: Ubuntu: sudo apt-get install sumo sumo-tools sumo-doc Windows: - Download from SUMO Official Website - Add SUMO to system PATH Option 2: Install VISSIM VISSIM is a commercial tool, and a valid license is required. Install from PTV Group Website : https://www.ptvgroup.com Configure the Python COM interface for integration. Option 3: Install PyTorch (Optional for AI-based Models) For machine learning applications, install PyTorch: CPU Version: pip install torch torchvision torchaudio GPU Version (with CUDA): pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118","title":"Installation"},{"location":"installation/#installation-guide","text":"","title":"Installation Guide"},{"location":"installation/#requirements","text":"","title":"Requirements"},{"location":"installation/#hardware-requirements","text":"CPU : Minimum 4 cores (Intel i5 or higher recommended) RAM : At least 8GB (16GB recommended for simulations) Storage : Minimum 10GB free space GPU (Optional, for AI-based models): NVIDIA GPU with CUDA support (e.g., RTX 3060 or higher)","title":"Hardware Requirements"},{"location":"installation/#software-requirements","text":"Operating System : Ubuntu 20.04/22.04 or Windows 10/11 Python : Version 3.8 or later Git : Installed and configured SUMO (Optional): Required for traffic simulation VISSIM (Optional): Required for advanced microscopic simulation PyTorch (Optional): Required for AI-based model testing","title":"Software Requirements"},{"location":"installation/#local-installation","text":"","title":"Local Installation"},{"location":"installation/#step-1-clone-the-open-pav-repository","text":"Use Git to download the Open-PAV source code: git clone https://github.com/MarkMaaaaa/OpenPAV.git cd OpenPAV","title":"Step 1: Clone the Open-PAV Repository"},{"location":"installation/#step-2-install-dependencies","text":"Ensure Python and necessary packages are installed: pip install -r requirements.txt","title":"Step 2: Install Dependencies"},{"location":"installation/#step-3-basic-test-environment","text":"Run a simple Python simulation to verify the installation: Quick Start Quick Start Example If this scripts run successfully and the plot appears, your environment is ready.","title":"Step 3: Basic Test Environment"},{"location":"installation/#optional-components","text":"","title":"Optional Components"},{"location":"installation/#option-1-install-sumo","text":"For SUMO users, install it as follows: Ubuntu: sudo apt-get install sumo sumo-tools sumo-doc Windows: - Download from SUMO Official Website - Add SUMO to system PATH","title":"Option 1: Install SUMO"},{"location":"installation/#option-2-install-vissim","text":"VISSIM is a commercial tool, and a valid license is required. Install from PTV Group Website : https://www.ptvgroup.com Configure the Python COM interface for integration.","title":"Option 2: Install VISSIM"},{"location":"installation/#option-3-install-pytorch-optional-for-ai-based-models","text":"For machine learning applications, install PyTorch: CPU Version: pip install torch torchvision torchaudio GPU Version (with CUDA): pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118","title":"Option 3: Install PyTorch (Optional for AI-based Models)"},{"location":"model_calibration/","text":"Model Calibration Open-PAV provides tools for calibrating various physical vehicle dynamics models to improve the accuracy of PAV behavior simulations. Three-Stage Car-Following Model The Adaptive Cruise Control (ACC) system in PAV consists of two subsystems: Upper Command Control System \u2013 Generates acceleration commands based on sensor data. Lower Motion Response System \u2013 Regulates acceleration in response to commands. To account for real-world system delays, the Three-Stage Car-Following Model incorporates: - Stage 1: Sensor Perception Delay ( \\(\\eta_{a,1}\\) ) \u2013 The time required for the vehicle to detect and process leading vehicle data. - Stage 2: Control Computation Delay ( \\(\\eta_{a,2}\\) ) \u2013 The time taken to compute acceleration commands. - Stage 3: Vehicle Response Lag ( \\(\\eta_b\\) ) \u2013 The mechanical delay in executing the acceleration. Mathematical Formulation At any given time \\( t \\) , let: - \\( p_i(t) \\) , \\( v_i(t) \\) , and \\( a_i(t) \\) be the position, velocity, and acceleration of the following vehicle . - \\( p_{i+1}(t) \\) , \\( v_{i+1}(t) \\) , and \\( a_{i+1}(t) \\) be the position, velocity, and acceleration of the preceding vehicle . - \\( s_i(t) = (p_i(t), v_i(t), a_i(t)) \\) represent the state of the following vehicle. The command acceleration at time \\( t_0 + \\eta_{a,1} + \\eta_{a,2} \\) is computed as: \\[ u_i(t_0 + \\eta_{a,1} + \\eta_{a,2}) = g(v_i(t_0), v_{i+1}(t_0), p_i(t_0), p_{i+1}(t_0); \\theta_C) \\] where: - \\( g(\\cdot) \\) is a control law function . - \\( \\theta_C \\) represents the control parameters to be calibrated. In Stage 3 , due to the response lag \\( \\eta_b \\) , the acceleration is modeled as a first-order system : \\[ \\eta_b \\frac{d a_i(t)}{dt} + a_i(t) = u_i(t) \\] Thus, the state-space representation of the system is: \\[ \\dot{s}_i(t) = A_i s_i(t) + B_i u_i(t) \\] where: \\[ A = \\begin{bmatrix} 0 & 1 & 0 \\\\ 0 & 0 & 1 \\\\ 0 & 0 & -\\frac{1}{\\eta_b} \\end{bmatrix}, \\quad B = \\begin{bmatrix} 0 \\\\ 0 \\\\ \\frac{1}{\\eta_b} \\end{bmatrix} \\] The calibrated control function is: \\[ u_i(t) = g(v_i(t - \\eta_a), v_{i+1}(t - \\eta_a), p_i(t - \\eta_a), p_{i+1}(t - \\eta_a); \\theta_C) \\] where \\( \\eta_a = \\eta_{a,1} + \\eta_{a,2} \\) represents the total control delay . Hybrid Parameter Calibration Method To calibrate model parameters, Open-PAV implements a hybrid optimization algorithm that combines: Bayesian Optimization (BO) \u2013 Efficient global search for optimal delay parameters ( \\(\\eta_a, \\eta_b\\) ). Simultaneous Perturbation Stochastic Approximation (SPSA) \u2013 Fast local optimization for control gains ( \\(\\theta_C\\) ). Mathematical Formulation of Calibration The calibration problem is defined as an optimization problem : \\[ \\min_{\\theta} f(\\theta, D^{m}, D^{r}) \\] where: - \\( \\theta \\) is the parameter set to be calibrated . - \\( D^m \\) is the model-predicted vehicle states . - \\( D^r \\) is the real-world vehicle data . The objective function \\( f(\\cdot) \\) is based on the Root Mean Square Error (RMSE) : \\[ f(\\theta, D^{m}, D^{r}) = \\sqrt{\\frac{1}{N} \\sum_{j=1}^{N} \\left( a_{i,m}(t_j | \\theta) - a_{i,r}(t_j) \\right)^2 } \\] where: - \\( a_{i,m}(t_j | \\theta) \\) is the model-predicted acceleration . - \\( a_{i,r}(t_j) \\) is the real observed acceleration at time \\( t_j \\) . Calibration Process Data Input \u2013 Load collected vehicle trajectory data. Parameter Adjustment \u2013 Optimize both delay and control parameters using BO + SPSA. Validation \u2013 Compare calibrated model outputs with real-world observations. Export \u2013 Save parameters in a compatible format for SUMO, VISSIM, or other simulators. Supported Models Linear Models \u2013 Suitable for basic simulations. IDM Models \u2013 Ideal for SUMO simulations. Wiedemann-99 \u2013 Compatible with VISSIM. Machine Learning-Based Models \u2013 For advanced simulations.","title":"Model Calibration"},{"location":"model_calibration/#model-calibration","text":"Open-PAV provides tools for calibrating various physical vehicle dynamics models to improve the accuracy of PAV behavior simulations.","title":"Model Calibration"},{"location":"model_calibration/#three-stage-car-following-model","text":"The Adaptive Cruise Control (ACC) system in PAV consists of two subsystems: Upper Command Control System \u2013 Generates acceleration commands based on sensor data. Lower Motion Response System \u2013 Regulates acceleration in response to commands. To account for real-world system delays, the Three-Stage Car-Following Model incorporates: - Stage 1: Sensor Perception Delay ( \\(\\eta_{a,1}\\) ) \u2013 The time required for the vehicle to detect and process leading vehicle data. - Stage 2: Control Computation Delay ( \\(\\eta_{a,2}\\) ) \u2013 The time taken to compute acceleration commands. - Stage 3: Vehicle Response Lag ( \\(\\eta_b\\) ) \u2013 The mechanical delay in executing the acceleration.","title":"Three-Stage Car-Following Model"},{"location":"model_calibration/#mathematical-formulation","text":"At any given time \\( t \\) , let: - \\( p_i(t) \\) , \\( v_i(t) \\) , and \\( a_i(t) \\) be the position, velocity, and acceleration of the following vehicle . - \\( p_{i+1}(t) \\) , \\( v_{i+1}(t) \\) , and \\( a_{i+1}(t) \\) be the position, velocity, and acceleration of the preceding vehicle . - \\( s_i(t) = (p_i(t), v_i(t), a_i(t)) \\) represent the state of the following vehicle. The command acceleration at time \\( t_0 + \\eta_{a,1} + \\eta_{a,2} \\) is computed as: \\[ u_i(t_0 + \\eta_{a,1} + \\eta_{a,2}) = g(v_i(t_0), v_{i+1}(t_0), p_i(t_0), p_{i+1}(t_0); \\theta_C) \\] where: - \\( g(\\cdot) \\) is a control law function . - \\( \\theta_C \\) represents the control parameters to be calibrated. In Stage 3 , due to the response lag \\( \\eta_b \\) , the acceleration is modeled as a first-order system : \\[ \\eta_b \\frac{d a_i(t)}{dt} + a_i(t) = u_i(t) \\] Thus, the state-space representation of the system is: \\[ \\dot{s}_i(t) = A_i s_i(t) + B_i u_i(t) \\] where: \\[ A = \\begin{bmatrix} 0 & 1 & 0 \\\\ 0 & 0 & 1 \\\\ 0 & 0 & -\\frac{1}{\\eta_b} \\end{bmatrix}, \\quad B = \\begin{bmatrix} 0 \\\\ 0 \\\\ \\frac{1}{\\eta_b} \\end{bmatrix} \\] The calibrated control function is: \\[ u_i(t) = g(v_i(t - \\eta_a), v_{i+1}(t - \\eta_a), p_i(t - \\eta_a), p_{i+1}(t - \\eta_a); \\theta_C) \\] where \\( \\eta_a = \\eta_{a,1} + \\eta_{a,2} \\) represents the total control delay .","title":"Mathematical Formulation"},{"location":"model_calibration/#hybrid-parameter-calibration-method","text":"To calibrate model parameters, Open-PAV implements a hybrid optimization algorithm that combines: Bayesian Optimization (BO) \u2013 Efficient global search for optimal delay parameters ( \\(\\eta_a, \\eta_b\\) ). Simultaneous Perturbation Stochastic Approximation (SPSA) \u2013 Fast local optimization for control gains ( \\(\\theta_C\\) ).","title":"Hybrid Parameter Calibration Method"},{"location":"model_calibration/#mathematical-formulation-of-calibration","text":"The calibration problem is defined as an optimization problem : \\[ \\min_{\\theta} f(\\theta, D^{m}, D^{r}) \\] where: - \\( \\theta \\) is the parameter set to be calibrated . - \\( D^m \\) is the model-predicted vehicle states . - \\( D^r \\) is the real-world vehicle data . The objective function \\( f(\\cdot) \\) is based on the Root Mean Square Error (RMSE) : \\[ f(\\theta, D^{m}, D^{r}) = \\sqrt{\\frac{1}{N} \\sum_{j=1}^{N} \\left( a_{i,m}(t_j | \\theta) - a_{i,r}(t_j) \\right)^2 } \\] where: - \\( a_{i,m}(t_j | \\theta) \\) is the model-predicted acceleration . - \\( a_{i,r}(t_j) \\) is the real observed acceleration at time \\( t_j \\) .","title":"Mathematical Formulation of Calibration"},{"location":"model_calibration/#calibration-process","text":"Data Input \u2013 Load collected vehicle trajectory data. Parameter Adjustment \u2013 Optimize both delay and control parameters using BO + SPSA. Validation \u2013 Compare calibrated model outputs with real-world observations. Export \u2013 Save parameters in a compatible format for SUMO, VISSIM, or other simulators.","title":"Calibration Process"},{"location":"model_calibration/#supported-models","text":"Linear Models \u2013 Suitable for basic simulations. IDM Models \u2013 Ideal for SUMO simulations. Wiedemann-99 \u2013 Compatible with VISSIM. Machine Learning-Based Models \u2013 For advanced simulations.","title":"Supported Models"},{"location":"model_download/","text":"Vehicle and Model Selection Use the form below to select your vehicle brand and model . Then, click the corresponding download button to get the parameter file. Select Vehicle Brand: --Select-- Tesla Audi BMW All Models Select Vehicle Model: --Select a Brand First-- const vehicleModels = { \"Tesla\": [\"Model 3\", \"Model S\", \"Model X\"], \"Audi\": [\"A4\", \"A6\", \"A8\", \"E-tron\"], \"BMW\": [\"X5\", \"I3\"], \"General\": [\"All Available Models\"] }; function updateModels() { const brand = document.getElementById(\"brand\").value; const vehicleSelect = document.getElementById(\"vehicle\"); // Clear previous options vehicleSelect.innerHTML = \"\"; if (brand && vehicleModels[brand]) { vehicleModels[brand].forEach(model => { const option = document.createElement(\"option\"); option.value = model.toLowerCase().replace(\" \", \"_\"); // Ensure consistency with file naming option.textContent = model; vehicleSelect.appendChild(option); }); } else { const option = document.createElement(\"option\"); option.value = \"\"; option.textContent = \"--Select a Brand First--\"; vehicleSelect.appendChild(option); } } function updateDownloadButtons() { const vehicle = document.getElementById(\"vehicle\").value; const downloadContainer = document.getElementById(\"downloadButtons\"); // Clear previous buttons downloadContainer.innerHTML = \"\"; if (vehicle) { // Define file formats and types const files = { \"Linear Model\": `vp_linear_${vehicle}.json`, \"IDM Model (SUMO)\": `idm_${vehicle}.json`, \"Wiedemann-99 Model (VISSIM)\": `vissim_${vehicle}.json` }; // Create buttons dynamically Object.keys(files).forEach(modelType => { const fileName = files[modelType]; const button = document.createElement(\"button\"); button.textContent = `Download ${modelType}`; button.style = \"display: block; margin-top: 10px; padding: 8px 12px; font-size: 14px;\"; button.onclick = function () { const link = document.createElement(\"a\"); link.href = `sandbox:/mnt/data/${fileName}`; link.download = fileName; document.body.appendChild(link); link.click(); document.body.removeChild(link); }; downloadContainer.appendChild(button); }); } }","title":"Model Download"},{"location":"model_download/#vehicle-and-model-selection","text":"Use the form below to select your vehicle brand and model . Then, click the corresponding download button to get the parameter file. Select Vehicle Brand: --Select-- Tesla Audi BMW All Models Select Vehicle Model: --Select a Brand First-- const vehicleModels = { \"Tesla\": [\"Model 3\", \"Model S\", \"Model X\"], \"Audi\": [\"A4\", \"A6\", \"A8\", \"E-tron\"], \"BMW\": [\"X5\", \"I3\"], \"General\": [\"All Available Models\"] }; function updateModels() { const brand = document.getElementById(\"brand\").value; const vehicleSelect = document.getElementById(\"vehicle\"); // Clear previous options vehicleSelect.innerHTML = \"\"; if (brand && vehicleModels[brand]) { vehicleModels[brand].forEach(model => { const option = document.createElement(\"option\"); option.value = model.toLowerCase().replace(\" \", \"_\"); // Ensure consistency with file naming option.textContent = model; vehicleSelect.appendChild(option); }); } else { const option = document.createElement(\"option\"); option.value = \"\"; option.textContent = \"--Select a Brand First--\"; vehicleSelect.appendChild(option); } } function updateDownloadButtons() { const vehicle = document.getElementById(\"vehicle\").value; const downloadContainer = document.getElementById(\"downloadButtons\"); // Clear previous buttons downloadContainer.innerHTML = \"\"; if (vehicle) { // Define file formats and types const files = { \"Linear Model\": `vp_linear_${vehicle}.json`, \"IDM Model (SUMO)\": `idm_${vehicle}.json`, \"Wiedemann-99 Model (VISSIM)\": `vissim_${vehicle}.json` }; // Create buttons dynamically Object.keys(files).forEach(modelType => { const fileName = files[modelType]; const button = document.createElement(\"button\"); button.textContent = `Download ${modelType}`; button.style = \"display: block; margin-top: 10px; padding: 8px 12px; font-size: 14px;\"; button.onclick = function () { const link = document.createElement(\"a\"); link.href = `sandbox:/mnt/data/${fileName}`; link.download = fileName; document.body.appendChild(link); link.click(); document.body.removeChild(link); }; downloadContainer.appendChild(button); }); } }","title":"Vehicle and Model Selection"},{"location":"model_download_entire/","text":"Vehicle and Model Selection Use the form below to select your vehicle brand and model , along with the desired algorithm model and file type . The generated file will be available for download. Select Vehicle Brand: --Select-- Tesla Audi BMW Mercedes-Benz Ford Waymo Toyota KIA Hyundai Mitsubishi Peugeot Jaguar Mazda Lincoln All Models Select Vehicle Model: --Select a Brand First-- Select Algorithm Model: --Select-- Basic Linear Model Intelligent Driver Model (IDM) Wiedemann-99 AI-based Model Select Parameter File Type: --Select-- Original Parameters Vissim Parameters SUMO Parameters AI-based Parameters Download const vehicleModels = { \"Tesla\": [\"Model 3\", \"Model S\", \"Model X\"], \"Audi\": [\"A4 Avant\", \"A6\", \"A8\", \"E-tron\"], \"BMW\": [\"X5\", \"I3 S\"], \"Mercedes-Benz\": [\"A-Class\", \"GLE 450 4Matic\"], \"Ford\": [\"Fusion\", \"S-Max\"], \"Waymo\": [\"Self-Driving Car\"], \"Toyota\": [\"Rav 4\", \"Corolla\"], \"KIA\": [\"Niro\"], \"Hyundai\": [\"Ioniq Hybrid\"], \"Mitsubishi\": [\"SpaceStar\", \"Outlander PHEV\"], \"Peugeot\": [\"5008 GT Line\"], \"Jaguar\": [\"I-Pace\"], \"Mazda\": [\"Mazda 3\"], \"Lincoln\": [\"MKZ\"], \"General\": [\"All Available Models\"] }; function updateModels() { const brand = document.getElementById(\"brand\").value; const vehicleSelect = document.getElementById(\"vehicle\"); // Clear previous options vehicleSelect.innerHTML = \"\"; if (brand && vehicleModels[brand]) { vehicleModels[brand].forEach(model => { const option = document.createElement(\"option\"); option.value = model; option.textContent = model; vehicleSelect.appendChild(option); }); } else { const option = document.createElement(\"option\"); option.value = \"\"; option.textContent = \"--Select a Brand First--\"; vehicleSelect.appendChild(option); } } document.getElementById('modelForm').addEventListener('submit', async (e) => { e.preventDefault(); const brand = document.getElementById('brand').value; const vehicle = document.getElementById('vehicle').value; const algorithm = document.getElementById('algorithm').value; const filetype = document.getElementById('filetype').value; // Prepare data const data = { brand: brand, vehicle: vehicle, algorithm: algorithm, filetype: filetype, timestamp: new Date().toISOString() }; // Generate JSON file const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' }); const url = window.URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = `${brand}-${vehicle}-${algorithm}-${filetype}-parameters.json`; document.body.appendChild(link); link.click(); window.URL.revokeObjectURL(url); });","title":"Vehicle and Model Selection"},{"location":"model_download_entire/#vehicle-and-model-selection","text":"Use the form below to select your vehicle brand and model , along with the desired algorithm model and file type . The generated file will be available for download. Select Vehicle Brand: --Select-- Tesla Audi BMW Mercedes-Benz Ford Waymo Toyota KIA Hyundai Mitsubishi Peugeot Jaguar Mazda Lincoln All Models Select Vehicle Model: --Select a Brand First-- Select Algorithm Model: --Select-- Basic Linear Model Intelligent Driver Model (IDM) Wiedemann-99 AI-based Model Select Parameter File Type: --Select-- Original Parameters Vissim Parameters SUMO Parameters AI-based Parameters Download const vehicleModels = { \"Tesla\": [\"Model 3\", \"Model S\", \"Model X\"], \"Audi\": [\"A4 Avant\", \"A6\", \"A8\", \"E-tron\"], \"BMW\": [\"X5\", \"I3 S\"], \"Mercedes-Benz\": [\"A-Class\", \"GLE 450 4Matic\"], \"Ford\": [\"Fusion\", \"S-Max\"], \"Waymo\": [\"Self-Driving Car\"], \"Toyota\": [\"Rav 4\", \"Corolla\"], \"KIA\": [\"Niro\"], \"Hyundai\": [\"Ioniq Hybrid\"], \"Mitsubishi\": [\"SpaceStar\", \"Outlander PHEV\"], \"Peugeot\": [\"5008 GT Line\"], \"Jaguar\": [\"I-Pace\"], \"Mazda\": [\"Mazda 3\"], \"Lincoln\": [\"MKZ\"], \"General\": [\"All Available Models\"] }; function updateModels() { const brand = document.getElementById(\"brand\").value; const vehicleSelect = document.getElementById(\"vehicle\"); // Clear previous options vehicleSelect.innerHTML = \"\"; if (brand && vehicleModels[brand]) { vehicleModels[brand].forEach(model => { const option = document.createElement(\"option\"); option.value = model; option.textContent = model; vehicleSelect.appendChild(option); }); } else { const option = document.createElement(\"option\"); option.value = \"\"; option.textContent = \"--Select a Brand First--\"; vehicleSelect.appendChild(option); } } document.getElementById('modelForm').addEventListener('submit', async (e) => { e.preventDefault(); const brand = document.getElementById('brand').value; const vehicle = document.getElementById('vehicle').value; const algorithm = document.getElementById('algorithm').value; const filetype = document.getElementById('filetype').value; // Prepare data const data = { brand: brand, vehicle: vehicle, algorithm: algorithm, filetype: filetype, timestamp: new Date().toISOString() }; // Generate JSON file const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' }); const url = window.URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = `${brand}-${vehicle}-${algorithm}-${filetype}-parameters.json`; document.body.appendChild(link); link.click(); window.URL.revokeObjectURL(url); });","title":"Vehicle and Model Selection"},{"location":"quick_start/","text":"Quick Start Get started with Open-PAV by following these steps: Installation : Ensure Open-PAV is installed on your system. Refer to the Installation Guide for instructions. Data Preparation You can use your own dataset (LiDAR, images, videos, trajectory data) or Use our pre-collected dataset available in Open-PAV Model Download . Vehicle Selection : - Choose a vehicle brand and model (e.g., Tesla, Audi, Benz). Model Selection : - Select a simulation model type: - Basic Linear Model (linear parameters). - IDM Model. - Wiedemann-99 Model. - AI-based model. Simulator File Format Selection : - Choose the output format for your simulator: - Basic parameters file (generic format). - SUMO-compatible file. - VISSIM-compatible file. - TorchScript package (for AI-based models). Quick Start Example As an example, we provide a Basic Linear Model for a Tesla , running in a simple highway simulation. You can modify parameters and datasets to experiment with different configurations. Download Example Configuration File: Download Configuration document.getElementById(\"downloadButton\").addEventListener(\"click\", function () { const data = { \"vehicle\": \"Audi A4\", \"model\": \"Linear\", \"filetype\": \"Original\", \"parameter\": \"kv=1.35, kg=2, td=2, z=-0.5\", \"timestamp\": new Date().toISOString() }; const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' }); const url = window.URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = \"openpav_config.json\"; document.body.appendChild(link); link.click(); window.URL.revokeObjectURL(url); }); Then, run the script using Python: \ud83d\udce5 Download Python Script","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"Get started with Open-PAV by following these steps: Installation : Ensure Open-PAV is installed on your system. Refer to the Installation Guide for instructions.","title":"Quick Start"},{"location":"quick_start/#data-preparation","text":"You can use your own dataset (LiDAR, images, videos, trajectory data) or Use our pre-collected dataset available in Open-PAV Model Download . Vehicle Selection : - Choose a vehicle brand and model (e.g., Tesla, Audi, Benz). Model Selection : - Select a simulation model type: - Basic Linear Model (linear parameters). - IDM Model. - Wiedemann-99 Model. - AI-based model. Simulator File Format Selection : - Choose the output format for your simulator: - Basic parameters file (generic format). - SUMO-compatible file. - VISSIM-compatible file. - TorchScript package (for AI-based models).","title":"Data Preparation"},{"location":"quick_start/#quick-start-example","text":"As an example, we provide a Basic Linear Model for a Tesla , running in a simple highway simulation. You can modify parameters and datasets to experiment with different configurations. Download Example Configuration File: Download Configuration document.getElementById(\"downloadButton\").addEventListener(\"click\", function () { const data = { \"vehicle\": \"Audi A4\", \"model\": \"Linear\", \"filetype\": \"Original\", \"parameter\": \"kv=1.35, kg=2, td=2, z=-0.5\", \"timestamp\": new Date().toISOString() }; const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' }); const url = window.URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = \"openpav_config.json\"; document.body.appendChild(link); link.click(); window.URL.revokeObjectURL(url); }); Then, run the script using Python: \ud83d\udce5 Download Python Script","title":"Quick Start Example"},{"location":"simulation_integration/","text":"Simulation Integration Integrate Open-PAV with various simulation platforms to analyze automated vehicle behaviors. Supported Platforms Python-Based Basic Model : Simulate simple car-following behavior using a basic linear model. SUMO : Implement Intelligent Driver Model (IDM) for SUMO-based simulations. VISSIM : Implement Wiedemann-99 models with external driver models. TorchScript (AI-Based Models) : Deploy deep learning-based car-following models using PyTorch. Python-Based Basic Model A Basic Linear Model can be implemented using the following car-following equation: \\[ a = k_v (v_l - v_f) + k_g (p_l - p_f - v_f \\cdot T_d) + z \\] where: - \\( v_l, v_f \\) = velocities of the lead and following vehicle. - \\( p_l, p_f \\) = positions of the lead and following vehicle. - \\( T_d \\) = time delay. - \\( k_v, k_g, z \\) = model parameters. Example Simulation Below is a plot of a simple highway simulation where a Tesla follows a lead vehicle . ![Basic Model Simulation] To run the simulation: refer to Quick Start SUMO Integration The Intelligent Driver Model (IDM) is supported in SUMO for car-following simulations. Steps to Integrate IDM in SUMO Install SUMO if not already installed: bash sudo apt-get install sumo sumo-tools sumo-doc # Ubuntu Prepare SUMO Configuration: Open the SUMO configuration file and add the IDM car-following model. xml <vType id=\"IDM\" accel=\"XX\" decel=\"XX\" sigma=\"XX\" length=\"5\" minGap=\"2.5\" maxSpeed=\"33.3\" guiShape=\"passenger\"/> Assign the IDM Model to Vehicles: xml <vehicle id=\"veh0\" type=\"IDM\" route=\"route0\" depart=\"0\" /> Run SUMO Simulation : bash sumo -c simulation.sumocfg \ud83d\udd17 More details on IDM in SUMO VISSIM Integration (Wiedemann-99 Model) VISSIM supports the Wiedemann-99 car-following model , allowing for custom driver models . Steps to Integrate Wiedemann-99 in VISSIM Open PTV VISSIM . Build the road network and configure the simulation. Set Personalized Driving Model : Open Visual Studio and compile the driver model: bash Open car_follow_model.vcxproj and build This generates a DriverModel.dll file. Load the Driver Model in VISSIM : Open the Vehicle Types interface. Add four vehicle types and link the DLL file . Set External Driver Model and browse to the DriverModel.dll file. Run the Simulation : Configure evaluation settings in Evaluation-Configuration . Start the VISSIM simulation. \ud83d\udd17 Official Wiedemann-99 Documentation AI-Based Model Integration (TorchScript) For deep learning-based models, Open-PAV supports TorchScript inference models . Steps to Deploy AI-Based Car-Following Models Train a Neural Network-Based Model using PyTorch. ```python import torch class CarFollowingModel(torch.nn.Module): def init (self): super(). init () self.linear = torch.nn.Linear(4, 1) def forward(self, x): return self.linear(x) model = CarFollowingModel() torch.save(model, \"car_following_model.pt\") 2. **Convert to TorchScript for Deployment**: python model = torch.jit.script(model) model.save(\"car_following_model_scripted.pt\") 3. **Run AI-Based Simulation**: python model = torch.jit.load(\"car_following_model_scripted.pt\") input_data = torch.tensor([[v_l, v_f, p_l, p_f]]) # Example inputs predicted_acceleration = model(input_data) ``` This approach allows AI-enhanced car-following models to be deployed efficiently.","title":"Simulation Integration"},{"location":"simulation_integration/#simulation-integration","text":"Integrate Open-PAV with various simulation platforms to analyze automated vehicle behaviors.","title":"Simulation Integration"},{"location":"simulation_integration/#supported-platforms","text":"Python-Based Basic Model : Simulate simple car-following behavior using a basic linear model. SUMO : Implement Intelligent Driver Model (IDM) for SUMO-based simulations. VISSIM : Implement Wiedemann-99 models with external driver models. TorchScript (AI-Based Models) : Deploy deep learning-based car-following models using PyTorch.","title":"Supported Platforms"},{"location":"simulation_integration/#python-based-basic-model","text":"A Basic Linear Model can be implemented using the following car-following equation: \\[ a = k_v (v_l - v_f) + k_g (p_l - p_f - v_f \\cdot T_d) + z \\] where: - \\( v_l, v_f \\) = velocities of the lead and following vehicle. - \\( p_l, p_f \\) = positions of the lead and following vehicle. - \\( T_d \\) = time delay. - \\( k_v, k_g, z \\) = model parameters.","title":"Python-Based Basic Model"},{"location":"simulation_integration/#example-simulation","text":"Below is a plot of a simple highway simulation where a Tesla follows a lead vehicle . ![Basic Model Simulation] To run the simulation: refer to Quick Start","title":"Example Simulation"},{"location":"simulation_integration/#sumo-integration","text":"The Intelligent Driver Model (IDM) is supported in SUMO for car-following simulations.","title":"SUMO Integration"},{"location":"simulation_integration/#steps-to-integrate-idm-in-sumo","text":"Install SUMO if not already installed: bash sudo apt-get install sumo sumo-tools sumo-doc # Ubuntu Prepare SUMO Configuration: Open the SUMO configuration file and add the IDM car-following model. xml <vType id=\"IDM\" accel=\"XX\" decel=\"XX\" sigma=\"XX\" length=\"5\" minGap=\"2.5\" maxSpeed=\"33.3\" guiShape=\"passenger\"/> Assign the IDM Model to Vehicles: xml <vehicle id=\"veh0\" type=\"IDM\" route=\"route0\" depart=\"0\" /> Run SUMO Simulation : bash sumo -c simulation.sumocfg \ud83d\udd17 More details on IDM in SUMO","title":"Steps to Integrate IDM in SUMO"},{"location":"simulation_integration/#vissim-integration-wiedemann-99-model","text":"VISSIM supports the Wiedemann-99 car-following model , allowing for custom driver models .","title":"VISSIM Integration (Wiedemann-99 Model)"},{"location":"simulation_integration/#steps-to-integrate-wiedemann-99-in-vissim","text":"Open PTV VISSIM . Build the road network and configure the simulation. Set Personalized Driving Model : Open Visual Studio and compile the driver model: bash Open car_follow_model.vcxproj and build This generates a DriverModel.dll file. Load the Driver Model in VISSIM : Open the Vehicle Types interface. Add four vehicle types and link the DLL file . Set External Driver Model and browse to the DriverModel.dll file. Run the Simulation : Configure evaluation settings in Evaluation-Configuration . Start the VISSIM simulation. \ud83d\udd17 Official Wiedemann-99 Documentation","title":"Steps to Integrate Wiedemann-99 in VISSIM"},{"location":"simulation_integration/#ai-based-model-integration-torchscript","text":"For deep learning-based models, Open-PAV supports TorchScript inference models .","title":"AI-Based Model Integration (TorchScript)"},{"location":"simulation_integration/#steps-to-deploy-ai-based-car-following-models","text":"Train a Neural Network-Based Model using PyTorch. ```python import torch class CarFollowingModel(torch.nn.Module): def init (self): super(). init () self.linear = torch.nn.Linear(4, 1) def forward(self, x): return self.linear(x) model = CarFollowingModel() torch.save(model, \"car_following_model.pt\") 2. **Convert to TorchScript for Deployment**: python model = torch.jit.script(model) model.save(\"car_following_model_scripted.pt\") 3. **Run AI-Based Simulation**: python model = torch.jit.load(\"car_following_model_scripted.pt\") input_data = torch.tensor([[v_l, v_f, p_l, p_f]]) # Example inputs predicted_acceleration = model(input_data) ``` This approach allows AI-enhanced car-following models to be deployed efficiently.","title":"Steps to Deploy AI-Based Car-Following Models"}]}