{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open-PAV Open-PAV (Open Product Automated Vehicle) is an open platform designed to facilitate data collection, model calibration, and simulation of producted automated vehicle behaviors. It integrates diverse datasets and calibrated vehicle models, making it an essential tool for researchers and developers aiming to study product automated vehicle (PAV) dynamics and their impacts. The project encourages contributions from the research community and provides ready-to-use model parameters for seamless integration with simulation tools. Key Features Comprehensive Data Repository Collects and organizes data from PAVs, including LiDAR, images, videos, and trajectory data (We have summarized 14 AV brands, 33 AV models in 13 Open-source AV Datasets from 6 AV Data Providers, Dataset Publication ). Provides datasets in a unified vectorized format for efficient access and analysis. AV Model Calibration Supports linear models, IDM models (for SUMO), Wiedemann-99 (for Vissim), and machine learning-based models. Includes pre-configured model parameters for direct use in traditional simulation software. Multiple Simulator Integrations Enables rapid and accurate simulation of automated vehicle behavior and analysis of their impacts. Community Collaboration Designed to foster contributions and collaboration among researchers globally. What's New March 2025 Model Enhancements: Improved calibration modeling methodology. Simulation Integration: Configured packages for SUMO, VISSIM, and basic parameters for models. December 2024 Dataset Expansion: Added new open-source trajectory datasets from ULTRA datasets. Model Enhancements: Improved basic logic for the project. November 2024 Project Startup: Comprehensive installation and user guides are now available. Major Components Data Repository : A unified storage of diverse datasets (LiDAR, images, videos, trajectories). Model Calibration Tools : Utilities to calibrate vehicle kinematic models and export them for simulation. Simulator Integration : Pre-configured packages for SUMO, VISSIM, and other platforms. For more details, refer to the Open-PAV Documentation .","title":"Overview"},{"location":"#open-pav","text":"Open-PAV (Open Product Automated Vehicle) is an open platform designed to facilitate data collection, model calibration, and simulation of producted automated vehicle behaviors. It integrates diverse datasets and calibrated vehicle models, making it an essential tool for researchers and developers aiming to study product automated vehicle (PAV) dynamics and their impacts. The project encourages contributions from the research community and provides ready-to-use model parameters for seamless integration with simulation tools.","title":"Open-PAV"},{"location":"#key-features","text":"Comprehensive Data Repository Collects and organizes data from PAVs, including LiDAR, images, videos, and trajectory data (We have summarized 14 AV brands, 33 AV models in 13 Open-source AV Datasets from 6 AV Data Providers, Dataset Publication ). Provides datasets in a unified vectorized format for efficient access and analysis. AV Model Calibration Supports linear models, IDM models (for SUMO), Wiedemann-99 (for Vissim), and machine learning-based models. Includes pre-configured model parameters for direct use in traditional simulation software. Multiple Simulator Integrations Enables rapid and accurate simulation of automated vehicle behavior and analysis of their impacts. Community Collaboration Designed to foster contributions and collaboration among researchers globally.","title":"Key Features"},{"location":"#whats-new","text":"March 2025 Model Enhancements: Improved calibration modeling methodology. Simulation Integration: Configured packages for SUMO, VISSIM, and basic parameters for models. December 2024 Dataset Expansion: Added new open-source trajectory datasets from ULTRA datasets. Model Enhancements: Improved basic logic for the project. November 2024 Project Startup: Comprehensive installation and user guides are now available.","title":"What's New"},{"location":"#major-components","text":"Data Repository : A unified storage of diverse datasets (LiDAR, images, videos, trajectories). Model Calibration Tools : Utilities to calibrate vehicle kinematic models and export them for simulation. Simulator Integration : Pre-configured packages for SUMO, VISSIM, and other platforms. For more details, refer to the Open-PAV Documentation .","title":"Major Components"},{"location":"installation/","text":"Installation Guide Requirements Hardware Requirements CPU : Minimum 4 cores (Intel i5 or higher recommended) RAM : At least 8GB (16GB recommended for simulations) Storage : Minimum 10GB free space GPU (Optional, for AI-based models): NVIDIA GPU with CUDA support (e.g., RTX 3060 or higher) Software Requirements Operating System : Ubuntu 20.04/22.04 or Windows 10/11 Python : Version 3.8 or later Git : Installed and configured SUMO (Optional): Required for traffic simulation VISSIM (Optional): Required for advanced microscopic simulation PyTorch (Optional): Required for AI-based model testing Local Installation Step 1: Clone the Open-PAV Repository Use Git to download the Open-PAV source code: git clone https://github.com/MarkMaaaaa/OpenPAV.git cd OpenPAV Step 2: Install Dependencies Ensure Python and necessary packages are installed: pip install -r requirements.txt Step 3: Basic Test Environment Run a simple Python simulation to verify the installation: Quick Start Quick Start Example If this scripts run successfully and the plot appears, your environment is ready. Optional Components Option 1: Install SUMO For SUMO users, install it as follows: Ubuntu: sudo apt-get install sumo sumo-tools sumo-doc Windows: - Download from SUMO Official Website - Add SUMO to system PATH Option 2: Install VISSIM VISSIM is a commercial tool, and a valid license is required. Install from PTV Group Website : https://www.ptvgroup.com Configure the Python COM interface for integration. Option 3: Install PyTorch (Optional for AI-based Models) For machine learning applications, install PyTorch: CPU Version: pip install torch torchvision torchaudio GPU Version (with CUDA): pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118","title":"Installation"},{"location":"installation/#installation-guide","text":"","title":"Installation Guide"},{"location":"installation/#requirements","text":"","title":"Requirements"},{"location":"installation/#hardware-requirements","text":"CPU : Minimum 4 cores (Intel i5 or higher recommended) RAM : At least 8GB (16GB recommended for simulations) Storage : Minimum 10GB free space GPU (Optional, for AI-based models): NVIDIA GPU with CUDA support (e.g., RTX 3060 or higher)","title":"Hardware Requirements"},{"location":"installation/#software-requirements","text":"Operating System : Ubuntu 20.04/22.04 or Windows 10/11 Python : Version 3.8 or later Git : Installed and configured SUMO (Optional): Required for traffic simulation VISSIM (Optional): Required for advanced microscopic simulation PyTorch (Optional): Required for AI-based model testing","title":"Software Requirements"},{"location":"installation/#local-installation","text":"","title":"Local Installation"},{"location":"installation/#step-1-clone-the-open-pav-repository","text":"Use Git to download the Open-PAV source code: git clone https://github.com/MarkMaaaaa/OpenPAV.git cd OpenPAV","title":"Step 1: Clone the Open-PAV Repository"},{"location":"installation/#step-2-install-dependencies","text":"Ensure Python and necessary packages are installed: pip install -r requirements.txt","title":"Step 2: Install Dependencies"},{"location":"installation/#step-3-basic-test-environment","text":"Run a simple Python simulation to verify the installation: Quick Start Quick Start Example If this scripts run successfully and the plot appears, your environment is ready.","title":"Step 3: Basic Test Environment"},{"location":"installation/#optional-components","text":"","title":"Optional Components"},{"location":"installation/#option-1-install-sumo","text":"For SUMO users, install it as follows: Ubuntu: sudo apt-get install sumo sumo-tools sumo-doc Windows: - Download from SUMO Official Website - Add SUMO to system PATH","title":"Option 1: Install SUMO"},{"location":"installation/#option-2-install-vissim","text":"VISSIM is a commercial tool, and a valid license is required. Install from PTV Group Website : https://www.ptvgroup.com Configure the Python COM interface for integration.","title":"Option 2: Install VISSIM"},{"location":"installation/#option-3-install-pytorch-optional-for-ai-based-models","text":"For machine learning applications, install PyTorch: CPU Version: pip install torch torchvision torchaudio GPU Version (with CUDA): pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118","title":"Option 3: Install PyTorch (Optional for AI-based Models)"},{"location":"model_calibration/","text":"Model Calibration Open-PAV provides tools for calibrating various vehicle kinematic models to improve the accuracy of automated vehicle behavior simulations. Three-Stage Car-Following Model The Adaptive Cruise Control (ACC) system in automated vehicles (AVs) consists of two subsystems: 1. Upper Command Control System \u2013 Generates acceleration commands based on sensor data. 2. Lower Motion Response System \u2013 Regulates acceleration in response to commands. To account for real-world system delays, the Three-Stage Car-Following Model incorporates: - Stage 1: Sensor Perception Delay (\u03b7a,1) \u2013 The time required for the vehicle to detect and process leading vehicle data. - Stage 2: Control Computation Delay (\u03b7a,2) \u2013 The time taken to compute acceleration commands. - Stage 3: Vehicle Response Lag (\u03b7b) \u2013 The mechanical delay in executing the acceleration. The model\u2019s state-space representation is: [ \\dot{s}_i(t) = A_is_i(t) + B_iu_i(t) ] where ( A ) and ( B ) matrices define the system dynamics, and the command acceleration ( u_i(t) ) depends on historical vehicle states. Hybrid Parameter Calibration Method To calibrate model parameters, Open-PAV implements a hybrid optimization algorithm that combines: Bayesian Optimization (BO) \u2013 Efficient global search for optimal delay parameters ((\\eta_a, \\eta_b)). Simultaneous Perturbation Stochastic Approximation (SPSA) \u2013 Fast local optimization for control gains ((\\bm{\\theta}_C)). The calibration problem is formulated as: [ \\min f(\\bm{\\theta}, \\bm{D}^{\\text{m}}, \\bm{D}^{\\text{r}}) ] where the objective function ( f(\\cdot) ) minimizes the root mean square error (RMSE) between model outputs ((\\bm{D}^{\\text{m}})) and real-world observations ((\\bm{D}^{\\text{r}})). Calibration Process Data Input \u2013 Load collected vehicle trajectory data. Parameter Adjustment \u2013 Optimize both delay and control parameters using BO + SPSA. Validation \u2013 Compare calibrated model outputs with real-world observations. Export \u2013 Save parameters in a compatible format for SUMO, VISSIM, or other simulators. Supported Models Linear Models \u2013 Suitable for basic simulations. IDM Models \u2013 Ideal for SUMO simulations. Wiedemann-99 \u2013 Compatible with VISSIM. Machine Learning-Based Models \u2013 For advanced simulations. For detailed calibration procedures, refer to the Developer Guide .","title":"Model Calibration"},{"location":"model_calibration/#model-calibration","text":"Open-PAV provides tools for calibrating various vehicle kinematic models to improve the accuracy of automated vehicle behavior simulations.","title":"Model Calibration"},{"location":"model_calibration/#three-stage-car-following-model","text":"The Adaptive Cruise Control (ACC) system in automated vehicles (AVs) consists of two subsystems: 1. Upper Command Control System \u2013 Generates acceleration commands based on sensor data. 2. Lower Motion Response System \u2013 Regulates acceleration in response to commands. To account for real-world system delays, the Three-Stage Car-Following Model incorporates: - Stage 1: Sensor Perception Delay (\u03b7a,1) \u2013 The time required for the vehicle to detect and process leading vehicle data. - Stage 2: Control Computation Delay (\u03b7a,2) \u2013 The time taken to compute acceleration commands. - Stage 3: Vehicle Response Lag (\u03b7b) \u2013 The mechanical delay in executing the acceleration. The model\u2019s state-space representation is: [ \\dot{s}_i(t) = A_is_i(t) + B_iu_i(t) ] where ( A ) and ( B ) matrices define the system dynamics, and the command acceleration ( u_i(t) ) depends on historical vehicle states.","title":"Three-Stage Car-Following Model"},{"location":"model_calibration/#hybrid-parameter-calibration-method","text":"To calibrate model parameters, Open-PAV implements a hybrid optimization algorithm that combines: Bayesian Optimization (BO) \u2013 Efficient global search for optimal delay parameters ((\\eta_a, \\eta_b)). Simultaneous Perturbation Stochastic Approximation (SPSA) \u2013 Fast local optimization for control gains ((\\bm{\\theta}_C)). The calibration problem is formulated as: [ \\min f(\\bm{\\theta}, \\bm{D}^{\\text{m}}, \\bm{D}^{\\text{r}}) ] where the objective function ( f(\\cdot) ) minimizes the root mean square error (RMSE) between model outputs ((\\bm{D}^{\\text{m}})) and real-world observations ((\\bm{D}^{\\text{r}})).","title":"Hybrid Parameter Calibration Method"},{"location":"model_calibration/#calibration-process","text":"Data Input \u2013 Load collected vehicle trajectory data. Parameter Adjustment \u2013 Optimize both delay and control parameters using BO + SPSA. Validation \u2013 Compare calibrated model outputs with real-world observations. Export \u2013 Save parameters in a compatible format for SUMO, VISSIM, or other simulators.","title":"Calibration Process"},{"location":"model_calibration/#supported-models","text":"Linear Models \u2013 Suitable for basic simulations. IDM Models \u2013 Ideal for SUMO simulations. Wiedemann-99 \u2013 Compatible with VISSIM. Machine Learning-Based Models \u2013 For advanced simulations. For detailed calibration procedures, refer to the Developer Guide .","title":"Supported Models"},{"location":"model_download/","text":"Vehicle and Model Selection Use the form below to select your vehicle and algorithm model. The generated file will be available for download. Select Vehicle Model: --Select-- Tesla Audi Benz Select Algorithm Model: --Select-- Intelligent Driver Model (IDM) Linear Model Machine Learning Model Select Parameter File Type: --Select-- Original Parameters Vissim Parameters SUMO Parameters Generate and Download document.getElementById('modelForm').addEventListener('submit', async (e) => { e.preventDefault(); const vehicle = document.getElementById('vehicle').value; const algorithm = document.getElementById('algorithm').value; const filetype = document.getElementById('filetype').value; // Prepare data const data = { vehicle: vehicle, algorithm: algorithm, filetype: filetype, timestamp: new Date().toISOString() }; // Generate JSON file const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' }); const url = window.URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = `${vehicle}-${algorithm}-${filetype}-parameters.json`; document.body.appendChild(link); link.click(); window.URL.revokeObjectURL(url); });","title":"Model Download"},{"location":"model_download/#vehicle-and-model-selection","text":"Use the form below to select your vehicle and algorithm model. The generated file will be available for download. Select Vehicle Model: --Select-- Tesla Audi Benz Select Algorithm Model: --Select-- Intelligent Driver Model (IDM) Linear Model Machine Learning Model Select Parameter File Type: --Select-- Original Parameters Vissim Parameters SUMO Parameters Generate and Download document.getElementById('modelForm').addEventListener('submit', async (e) => { e.preventDefault(); const vehicle = document.getElementById('vehicle').value; const algorithm = document.getElementById('algorithm').value; const filetype = document.getElementById('filetype').value; // Prepare data const data = { vehicle: vehicle, algorithm: algorithm, filetype: filetype, timestamp: new Date().toISOString() }; // Generate JSON file const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' }); const url = window.URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = `${vehicle}-${algorithm}-${filetype}-parameters.json`; document.body.appendChild(link); link.click(); window.URL.revokeObjectURL(url); });","title":"Vehicle and Model Selection"},{"location":"quick_start/","text":"Quick Start Get started with Open-PAV by following these steps: Installation : Ensure Open-PAV is installed on your system. Refer to the Installation Guide for instructions. Data Preparation You can use your own dataset (LiDAR, images, videos, trajectory data) or Use our pre-collected dataset available in Open-PAV Model Download . Vehicle Selection : - Choose a vehicle brand and model (e.g., Tesla, Audi, Benz). Model Selection : - Select a simulation model type: - Basic Linear Model (linear parameters). - IDM Model. - Wiedemann-99 Model. - AI-based model. Simulator File Format Selection : - Choose the output format for your simulator: - Basic parameters file (generic format). - SUMO-compatible file. - VISSIM-compatible file. - TorchScript package (for AI-based models). Quick Start Example As an example, we provide a Basic Linear Model for a Tesla , running in a simple highway simulation. You can modify parameters and datasets to experiment with different configurations. Download Example Configuration File: Download Configuration document.getElementById(\"downloadButton\").addEventListener(\"click\", function () { const data = { \"vehicle\": \"Audi A4\", \"model\": \"Linear\", \"filetype\": \"Original\", \"parameter\": \"kv=1.35, kg=2, td=2, z=-0.5\", \"timestamp\": new Date().toISOString() }; const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' }); const url = window.URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = \"openpav_config.json\"; document.body.appendChild(link); link.click(); window.URL.revokeObjectURL(url); }); Then, run the script using Python: Download Python Script","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"Get started with Open-PAV by following these steps: Installation : Ensure Open-PAV is installed on your system. Refer to the Installation Guide for instructions.","title":"Quick Start"},{"location":"quick_start/#data-preparation","text":"You can use your own dataset (LiDAR, images, videos, trajectory data) or Use our pre-collected dataset available in Open-PAV Model Download . Vehicle Selection : - Choose a vehicle brand and model (e.g., Tesla, Audi, Benz). Model Selection : - Select a simulation model type: - Basic Linear Model (linear parameters). - IDM Model. - Wiedemann-99 Model. - AI-based model. Simulator File Format Selection : - Choose the output format for your simulator: - Basic parameters file (generic format). - SUMO-compatible file. - VISSIM-compatible file. - TorchScript package (for AI-based models).","title":"Data Preparation"},{"location":"quick_start/#quick-start-example","text":"As an example, we provide a Basic Linear Model for a Tesla , running in a simple highway simulation. You can modify parameters and datasets to experiment with different configurations. Download Example Configuration File: Download Configuration document.getElementById(\"downloadButton\").addEventListener(\"click\", function () { const data = { \"vehicle\": \"Audi A4\", \"model\": \"Linear\", \"filetype\": \"Original\", \"parameter\": \"kv=1.35, kg=2, td=2, z=-0.5\", \"timestamp\": new Date().toISOString() }; const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' }); const url = window.URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = \"openpav_config.json\"; document.body.appendChild(link); link.click(); window.URL.revokeObjectURL(url); }); Then, run the script using Python: Download Python Script","title":"Quick Start Example"},{"location":"simulation_integration/","text":"Simulation Integration Integrate Open-PAV with various simulation platforms to simulate automated vehicle behaviors: Supported Platforms SUMO : Use IDM models with pre-configured parameters. Vissim : Utilize Wiedemann-99 models for accurate simulations. Other Platforms : Custom integration supported via exported model parameters. Integration Steps Model Calibration : Ensure your vehicle model is calibrated. Refer to the Model Calibration Guide . Parameter Export : Export the calibrated parameters in the required format (e.g., original parameters, Vissim parameter file, SUMO parameter file). Simulation Setup : Import the parameters into your simulation platform. Execution : Run the simulation to analyze vehicle behaviors. For comprehensive integration instructions, see the Developer Guide .","title":"Simulation Integration"},{"location":"simulation_integration/#simulation-integration","text":"Integrate Open-PAV with various simulation platforms to simulate automated vehicle behaviors:","title":"Simulation Integration"},{"location":"simulation_integration/#supported-platforms","text":"SUMO : Use IDM models with pre-configured parameters. Vissim : Utilize Wiedemann-99 models for accurate simulations. Other Platforms : Custom integration supported via exported model parameters.","title":"Supported Platforms"},{"location":"simulation_integration/#integration-steps","text":"Model Calibration : Ensure your vehicle model is calibrated. Refer to the Model Calibration Guide . Parameter Export : Export the calibrated parameters in the required format (e.g., original parameters, Vissim parameter file, SUMO parameter file). Simulation Setup : Import the parameters into your simulation platform. Execution : Run the simulation to analyze vehicle behaviors. For comprehensive integration instructions, see the Developer Guide .","title":"Integration Steps"}]}